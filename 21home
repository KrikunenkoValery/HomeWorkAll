#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <locale.h>

typedef struct Cornice {
    int length;
    int ceilingWidth;
    int wallHeight;
    char material[20];
} cornice_t;

int getRandomNumber(int min, int max) {
    return rand() % (max - min + 1) + min;
}

char* getRandomString(int length) {
    static char randomString[20];
    const char charset[] = "qwertyuiopasdfghjklzxcvbmn";
    for (int i = 0; i < length; i++) {
        randomString[i] = charset[rand() % (sizeof(charset) - 1)];
    }
    randomString[length] = '\0';
    return randomString;
}

void fillCornicesArray(cornice_t cornices[], int SIZE) {
    srand(time(NULL));
    for (int i = 0; i < SIZE; i++) {
        cornices[i].length = getRandomNumber(1, 10);
        cornices[i].ceilingWidth = getRandomNumber(1, 5);
        cornices[i].wallHeight = getRandomNumber(2, 8);
        strcpy(cornices[i].material, getRandomString(5));
    }
}

void save(cornice_t* cornices, int SIZE) {
    FILE* file = fopen("cornices.txt", "w");
    for (int i = 0; i < SIZE; i++) {
        fprintf(file, "%d %d %d %s\n", cornices[i].length, cornices[i].ceilingWidth, cornices[i].wallHeight, cornices[i].material);
    }
    fclose(file);
}

void load(cornice_t* cornices, int SIZE) {
    FILE* file = fopen("cornices.txt", "r");
    for (int i = 0; i < SIZE; i++) {
        fscanf(file, "%d %d %d %s", &cornices[i].length, &cornices[i].ceilingWidth, &cornices[i].wallHeight, cornices[i].material);
    }
    fclose(file);
}

void print_array(cornice_t* cornices, int SIZE) {
    for (int i = 0; i < SIZE; i++) {
        printf("| %2d  %4d  %4d || %s |\n", cornices[i].length, cornices[i].ceilingWidth, cornices[i].wallHeight, cornices[i].material);
    }
}

cornice_t* search_material(cornice_t* cornices, int SIZE, char* material) {
    for (int i = 0; i < SIZE; i++) {
        if (strcmp(cornices[i].material, material) == 0)
            return (cornices + i);
    }
    return NULL;
}

int main() {
    int SIZE;
    setlocale(LC_ALL, "RUS");

    printf("Введите число: ");
    scanf("%d", &SIZE);

    cornice_t* corns = (cornice_t*)malloc(SIZE * sizeof(cornice_t));
    fillCornicesArray(corns, SIZE);
    save(corns, SIZE);

    // Очищаем массив для загрузки из файла
    memset(corns, 0, SIZE * sizeof(cornice_t));
    load(corns, SIZE);

    print_array(corns, SIZE);

    char material[20];
    printf("Введите материал для поиска: ");
    scanf("%s", material);

    cornice_t* foundCornice = search_material(corns, SIZE, material);
    if (foundCornice != NULL) {
        printf("Материал найден '%s': ", material);
        printf("| %2d  %4d  %4d || %s |\n", foundCornice->length, foundCornice->ceilingWidth, foundCornice->wallHeight, foundCornice->material);
    }
    else {
        printf("Материал '%s' не найден.\n", material);
    }

    free(corns);
    return 0;
}
