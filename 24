#define _CRT_SECURE_NO_DEPRECATE
#include <stdio.h>
#include <locale.h>
#include <stdlib.h>

#define NMAX 100
#define TYPE char
#define FTYPE "%c, "

typedef struct stack {
	int top;
	TYPE data[NMAX];
} Stack;

struct Node {
	TYPE data;
	struct Node* next;
};

typedef struct Queue {
	struct Node* queue;
	struct Node* front;
	struct Node* back;
} Queue_list;

Stack init_stack();
int isempty(Stack* s);
int isfull(Stack* s);
int push(Stack* s, TYPE a);
TYPE pop(Stack* s);
TYPE top(Stack* s);

void display(Stack* s);

void enQueue(Queue_list* que, TYPE element);
TYPE deQueue(Queue_list* que);

Stack swap_half(Stack* s);

int main() {

	system("chcp 1251");

	// 1

	Stack stack1 = init_stack();

	char c;
	printf("Введите 4 символа >> ");
	for (int i = 0; i < 4; i++) {
		scanf("%c", &c);
		push(&stack1, c);
	}

	display(&stack1);

	printf("%c | ", top(&stack1));

	display(&stack1);

	printf("%c | ", pop(&stack1));

	display(&stack1);

	// 2

	Queue_list* Str = (Queue_list*)malloc(sizeof(Queue_list));
	Str->front = Str->back = NULL;

	char temp[NMAX];

	printf("Введите строку\n");
	fgets(temp, NMAX - 1, stdin);
	fgets(temp, NMAX - 1, stdin);

	for (int i = 0; i < NMAX - 1 && temp[i] != '\n'; i++)
		enQueue(Str, temp[i]);

	while (Str->front)
		printf(FTYPE, deQueue(Str));

	// 3 1

	Stack stack2 = init_stack();

	printf("\nВведите произвольные символы >> ");
	scanf("%c", &c);
	while (c != '\n') {
		push(&stack2, c);
		scanf("%c", &c);
	}

	display(&stack2);

	stack2 = swap_half(&stack2);
	display(&stack2);
}

Stack init_stack() {
	Stack s;
	s.top = 0;

	return s;
}

int isempty(Stack* s) {
	if (!s->top)
		return 1;
	return 0;
}

int isfull(Stack* s) {
	if (s->top >= NMAX - 1)
		return 1;
	return 0;
}

int push(Stack* s, TYPE a) {
	if (isfull(s))
		return 0;

	s->top++;

	s->data[s->top] = a;

	return 1;
}

TYPE pop(Stack* s) {
	if (isempty(s))
		return -1;

	TYPE d = s->data[s->top];

	s->top--;

	return d;
}

TYPE top(Stack* s) {
	if (isempty(s))
		return -1;

	return s->data[s->top];
}

void display(Stack* s) {
	int i = s->top;

	while (i > 0)
		printf(FTYPE, s->data[i--]);

	printf("\n");
}

void enQueue(Queue_list* queue, TYPE data) {
	if (!queue) {
		return;
	}

	struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));

	new_node->data = data;
	new_node->next = NULL;

	if (!queue->back)
		queue->front = queue->back = new_node;
	else {
		queue->back->next = new_node;
		queue->back = new_node;
	}
}

TYPE deQueue(Queue_list* queue) {
	if (queue->front == NULL)
		return 0;

	TYPE elem = queue->front->data;
	queue->front = queue->front->next;

	if (queue->front == NULL)
		queue->back = NULL;

	return elem;
}

Stack swap_half(Stack* s) {
	Stack* sub_s1 = (Stack*)malloc(sizeof(Stack));
	*sub_s1 = init_stack();
	int size;

	size = s->top;
	for (int i = 0; i < size / 2; i++)
		push(sub_s1, pop(s));

	Stack* sub_s2 = (Stack*)malloc(sizeof(Stack));
	*sub_s2 = init_stack();

	size = sub_s1->top;
	for (int i = 0; i < size; i++)
		push(sub_s2, pop(sub_s1));

	size = sub_s2->top;
	for (int i = 0; i < size; i++)
		push(s, pop(sub_s2));

	return *s;
}
